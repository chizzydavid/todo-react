version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy Environment
          command: |
            aws cloudformation delete-stack --stack-name cicd-infrastructure
          when: on_fail

orbs:
  aws-cli: circleci/aws-cli@2.0.3

jobs:
  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm i
      - save_cache:
          key: "npm packages"
          paths:
            - /src/node-modules
      - run: npm run lint

  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - "npm-packages"
      - run: npm i
      - run: npm run test

  analyze:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - "npm-packages"
      - run: npm audit

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation stack
          command: |
            aws cloudformation create-stack \
              --stack-name cicd-infrastructure \
              --template-body file://infra.yml \
              --region $AWS_DEFAULT_REGION

  config_deploy:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [21:c8:e7:41:d8:6c:da:5e:17:32:cf:ca:39:ad:b4:e8]
      - attach_workspace:
          at: ~/
      - run:
          name: "Get Resource IPs"
          command: "cat ~/inventory"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure Server
          command: |
            ansible-playbook -i inventory playbook.yml
      - destroy_environment

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Smoke test on Google.com
          command: |
            if curl -s --head "https://google.com" 
            then
              echo "It worked!"
            else
              echo "It failed"
            fi
      - destroy_environment


  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
            cat ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 


  # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
  # Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file create-bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: 
          name: Copy files from deploy folder to S3
          command: |
            aws s3 sync s3_deploy/. s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute Cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
          # aws cloudformation delete-stack --stack-name production-distro
          #  aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
          #  aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


workflows:
  ci-workflow:
    jobs:
      - build
      - test:
          requires: 
            - build
      # - analyze:
      #     requires: 
      #       - test
      # - create_infrastructure
      # - get_resource_ips:
      #     requires:
      #       - create_infrastructure      
      # - config_deploy:
      #     requires:
      #       - get_resource_ips
      # - smoke_test:
      #     requires:
      #       - config_deploy

  blue-green-workflow:
    jobs:
      - get_last_deployment_id
      - create_and_deploy_front_end:
          requires:
            - get_last_deployment_id
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - clean_up_old_front_end:
          requires:
            - promote_to_production

